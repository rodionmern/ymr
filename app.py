import requests
import telebot
from telebot import types
from logic.kinopoisk_api import get_movie_by_name
from logic.database import get_list_of_movies, add_movie_to_db, remove_from_db

token = "token"

bot=telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def start_button(message):
	markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
	list_btn=types.KeyboardButton("–ú–æ–∏ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞—Ä—ã")
	find_btn=types.KeyboardButton("–ù–∞–π—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª")
	remove_btn=types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª")
	markup.add(list_btn,find_btn,remove_btn)
	bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤ –º–µ–Ω—é.",reply_markup=markup)

@bot.message_handler(content_types="text")
def commands(message):
	user_id = message.from_user.id
	if message.text == "–ú–æ–∏ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞—Ä—ã":
		send_list_of_movies(message, user_id, "list")
	if message.text == "–ù–∞–π—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª":
		msg = bot.send_message(message.chat.id, "*–î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏* \[Q\]", parse_mode="MarkdownV2")
		bot.register_next_step_handler(msg, search_movie)
	if message.text == "–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª":
		send_list_of_movies(message, user_id, "remove")
		bot.register_next_step_handler(message, lambda m: remove_movie(m, user_id))

def search_movie(message):
	query = message.text
	if query != "Q":
		try:
			data = get_movie_by_name(query)
			print(data)
			if data:
				bot.send_photo(message.chat.id, data[0], data[1])
			msg = bot.send_message(message.chat.id, "*–î–∞–π—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 177\!* üåü \[Q\]", parse_mode="MarkdownV2")
			bot.register_next_step_handler(msg, lambda m: save_rating(m, query))
		except Exception as e:
			bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
	else:
		pass

def save_rating(message, title):
	rating = message.text
	user_id = message.from_user.id
	if rating != "Q":
		add_movie_to_db(title, user_id, rating)
		bot.send_message(message.chat.id, "*–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\!* üíæ", parse_mode="MarkdownV2")
	else:
		pass

def remove_movie(message, user_id):
	query = message.text
	if query != "Q":
		try:
			remove_from_db(query, user_id)
			bot.send_message(message.chat.id, "*–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\!* üóëÔ∏è", parse_mode="MarkdownV2")
		except Exception as e:
			bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
	else:
		pass

def send_list_of_movies(message, user_id, handler):
	try:
		data = get_list_of_movies(user_id, handler)
		if data:
			bot.send_message(message.chat.id, data, parse_mode="MarkdownV2")
	except Exception as e:
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

bot.infinity_polling()